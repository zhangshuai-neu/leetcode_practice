字节跳动/后端开发/三轮面试内容：

一面：简历相关内容+算法+编程+基础知识
    bitmap,buddy,heap
    页表，页式管理
    虚拟内存管理(开发容易，安全)
    内核空间和用户空间分离（指令集，开发容易，安全）
    进程、线程，调度器
    文件系统,索引有几阶,为什么(ext2相关内容)
    tcp和udp，使用udp的应用，使用tcp的应用
    http介绍
    
    最长不重复子串，解释方法，写代码
    数据库的ER图，三范式 x
    
二面：简历相关内容+os+算法+编程
    kmalloc和vmalloc
    slab内存管理
    文件系统VFS, ext2
    云计算多核多任务中的Cache的竞争和对性能的影响，AMD的处理器上cache的特别之处。
    CFS调度器,虚拟运行时和任务良好的调度时间(CFS不是固定时间片)
    Linux的pagefault，可以考虑一下mmap的映射完成之后的访问过程
    udp和tcp，怎么用udp实现tcp的效果
    中断的上半部和下半部(软中断，tasklet，wrokqueue)
    socket编程中的backlog(tcp连接队列)过多的原因，半连接攻击和accept不及时
    (从Linux下c的socket编程的角度)
    申请内存发现不足怎么办？
        zone中的水位值，kswapd守护进程(线程)的换进换出，杀死占据内存的很大的任务...
    Linux内核中跟踪ftrace，systemtab，hook钩子函数

    atoi实现: 解释方法，写代码
    注意下列case
    "" "-0001" "+213" "000123" "-00a1&×[ sd" "123456789023456789234567"
    "-2147483649" "2147483648" 
    
三面：算法+编程
    给一个文件，里面存放了几乎所有的int整数(从-2147483648到2147483647)，但是
    其中可能缺少几个数字，请你找出来。
    
    方法1：
        先原址排序，时间复杂度为N*Log(N)
        然后从-2147483648到2147483647进行遍历，时间复杂度为O(n)
        
        总的时间复杂度为N*Log(N)，空间复杂度为O(1)
        
    方法2：思路大致如下 解释方法，写代码
        请进行如下考虑: 
        如果一个文件包含int的所有整数,每个int是4个字节, 那么整个文件的大小就是
        固定的。如果少了一个数字，那么该文件大小就减少4个字节。
        
        请进行如下考虑：
        如果我们用0分割该文件，比0大的放到一边，比0小的放到一边。如果负数文件
        比预期(从-2147483648到-1)少，那么我们可以知道负数缺少了几个。
        同理知道正数缺少了几个。
        
        请进行如下考虑：
        我们可以采用快排的partition的方法进行分割，确定两部分缺少的数字数，
        如果没有缺少就进行剪枝，缺少就继续进行递归。
        但是由于我们知道值的范围，所以我们可以主动寻找的partition的值。
        比如0，比如 2147483647 / 2。
        
        该方法的时间复杂度为O(N)

学习参考：
[1] 深入理解Linux内核架构 (主要)
[2] 奔跑吧Linux内核 (主要)
[3] 深入理解Linux内核（辅助） 
[4] 计算机网络 (主要) //tcp,udp,http
[5] Unix高级环境编程 (book 辅助) // 多进程，多线程，进程通信，线程同步
[6] Unix高级环境编程学习视频 (视频 主要) 
https://www.bilibili.com/video/av18153772?from=search&seid=10889479474262838937
[7] 剑指offer (简单 牛客)
[8] leetcode (练习)
